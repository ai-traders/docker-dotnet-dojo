#!/bin/bash

set -e
if [[ ! -f ./releaser ]];then
  wget --quiet http://http.archive.ai-traders.com/releaser/1.0.3/releaser
fi
source ./releaser
if [[ ! -f ./docker-ops ]];then
  wget --quiet http://http.archive.ai-traders.com/docker-ops/0.3.3/docker-ops
fi
source ./docker-ops
# This goes as last in order to let end user variables override default values
releaser_init

image_name="dotnet-dojo"
image_dir="./image"
image_registry="docker-registry.ai-traders.com"

function get_imagerc_filename {
  name=$1
  if [ -z "$name" ]; then
    echo "Must specify variant of the dotnet-dojo"
    exit 3;
  fi
  echo "imagerc-${name}"
}

function get_tag_suffix {
  name=$1
  if [ -z "$name" ]; then
    echo "Must specify variant of the dotnet-dojo"
    exit 3;
  elif [ "$name" == "full" ]; then
    echo ""
  else
    echo "$name-"
  fi

}

set +u
command="$1"
case "${command}" in
  set_version)
      if [[ -n "$2" ]]; then
        next_version="$2"
        set_version_in_changelog "${changelog_file}" "${next_version}"
        set_next_oversion "${next_version}"
      else
        next_version=$(get_next_oversion)
        set_version_in_changelog "${changelog_file}" "${next_version}"
      fi
      ./tasks dockerfiles
      exit $?
      ;;
  verify)
      verify_version_for_release
      ./tasks dockerfiles
      modified_files=$(git status --porcelain | awk '{print $2}' | wc -l)
      if [ $modified_files != "0" ]; then
        echo "There are modified files in the working directory, you might have forgotten to commit re-generated Dockerfiles. Please run './tasks set_version' and commit"
        exit 5
      fi
      ;;
  git_tag)
      production_image_version=$(get_last_version_from_changelog "${changelog_file}")
      git tag -f "${production_image_version}"
      git push -f origin "${production_image_version}"
      ;;
  dockerfiles)
      production_image_version=$(get_last_version_from_changelog "${changelog_file}")
      python3 dockerfiles.py --iversion $production_image_version
      ;;
  build_one)
      ./tasks dockerfiles
      imagerc_filename=$(get_imagerc_filename $2)
      production_image_suffix=$(get_tag_suffix $2)
      if [[ -z "${GO_PIPELINE_LABEL}" ]];then
        # set to the latest git commit hash
        ci_version=$(git rev-parse HEAD)
      else
        ci_version="${GO_PIPELINE_LABEL}"
      fi
      image_tag="${production_image_suffix}${ci_version}"
      ( set -x; cd "${image_dir}"; docker build -f Dockerfile.$2 -t "${image_name}:${image_tag}" .; )
      docker_ops::create_imagerc "${image_dir}" "${imagerc_filename}" "${image_name}" "${image_tag}" "${image_registry}"
      docker_ops::push_tmp "${image_name}" "${image_tag}" "${image_registry}"
      ;;
  itest_one)
      imagerc_filename=$(get_imagerc_filename $2)
      docker_ops::ensure_temp_image "${image_dir}" "${imagerc_filename}"
      echo "Testing image: ${AIT_DOCKER_IMAGE_URL}"
      echo "DOJO_DOCKER_IMAGE=\"${AIT_DOCKER_IMAGE_URL}\"" > Dojofile.to_be_tested
      echo "DOJO_WORK_OUTER=$(pwd)/test/integration/test_dojo_work" >> Dojofile.to_be_tested
      if [ "$2" == "full" ]; then
        time bats "$(pwd)/test/integration/end_user/bats_mono"
      else
        time bats "$(pwd)/test/integration/end_user/bats_core"
      fi
      exit $?
      ;;
  *)
      echo "Invalid command: '${command}'"
      exit 1
      ;;
esac
set +e
