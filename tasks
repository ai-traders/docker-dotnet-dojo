#!/bin/bash

set -e
if [[ ! -f ./releaser ]];then
  wget --quiet http://http.archive.ai-traders.com/releaser/1.0.3/releaser
fi
source ./releaser
if [[ ! -f ./docker-ops ]];then
  wget --quiet http://http.archive.ai-traders.com/docker-ops/0.2.3/docker-ops
fi
source ./docker-ops
# This goes as last in order to let end user variables override default values
releaser_init

image_name_no_registry="dotnet-ide"
image_name="tomzo/${image_name_no_registry}"
image_dir="./image"

function get_imagerc_filename {
  name=$1
  if [ -z "$name" ]; then
    echo "Must specify variant of the mono-ide"
    exit 3;
  fi
  echo "imagerc-${name}"
}

function get_tag_suffix {
  name=$1
  if [ -z "$name" ]; then
    echo "Must specify variant of the mono-ide"
    exit 3;
  elif [ "$name" == "full" ]; then
    echo ""
  else
    echo "$name-"
  fi

}

command="$1"
case "${command}" in
  set_version)
      if [[ -n "$2" ]]; then
        next_version="$2"
        set_version_in_changelog "${changelog_file}" "${next_version}"
        set_next_oversion "${next_version}"
      else
        next_version=$(get_next_oversion)
        set_version_in_changelog "${changelog_file}" "${next_version}"
      fi
      ./tasks dockerfiles
      exit $?
      ;;
  verify)
      verify_version_for_release
      ./tasks dockerfiles
      modified_files=$(git status --porcelain | awk '{print $2}' | wc -l)
      if [ $modified_files != "0" ]; then
        echo "There are modified files in the working directory, you might have forgotten to commit re-generated Dockerfiles. Please run './tasks set_version' and commit"
        exit 5
      fi
      ;;
  git_tag)
      production_image_version=$(get_last_version_from_changelog "${changelog_file}")
      git tag -f "${production_image_version}"
      git push -f origin "${production_image_version}"
      ;;
  dockerfiles)
      production_image_version=$(get_last_version_from_changelog "${changelog_file}")
      python3 dockerfiles.py --iversion $production_image_version
      ;;
  build_one)
      ./tasks dockerfiles
      imagerc_filename=$(get_imagerc_filename $2)
      production_image_version=$(get_last_version_from_changelog "${changelog_file}")
      production_image_suffix=$(get_tag_suffix $2)
      production_image_tag="${production_image_suffix}${production_image_version}"
      docker_build_options="--build-arg this_image_name_arg=${image_name_no_registry} --build-arg this_image_tag_arg=${production_image_tag} -f Dockerfile.$2"
      if [[ -z "${GO_PIPELINE_LABEL}" ]];then
        # set to the latest git commit hash
        ci_version=$(git rev-parse HEAD)
      else
        ci_version="${GO_PIPELINE_LABEL}"
      fi
      docker_build "${image_dir}" "${imagerc_filename}" "${image_name}" "${production_image_suffix}${ci_version}"
      ;;
  trigger_dockerhub)
      if [ -z "${DOCKERHUB_TOKEN}" ]; then
        echo "${DOCKERHUB_TOKEN} must be set"
        exit 5
      fi
      production_image_version=$(get_last_version_from_changelog "${changelog_file}")
      curl -H "Content-Type: application/json" --data "{\"source_type\": \"Tag\", \"source_name\": \"${production_image_version}\"}" -X POST https://registry.hub.docker.com/u/tomzo/dotnet-ide/trigger/${DOCKERHUB_TOKEN}/
      ;;
  wait_one)
      imagerc_filename=$(get_imagerc_filename $2)
      production_image_version=$(get_last_version_from_changelog "${changelog_file}")
      production_image_suffix=$(get_tag_suffix $2)
      production_image_tag="${production_image_suffix}${production_image_version}"
      full_name="${image_name}:${production_image_tag}"
      echo "Trying to pull $full_name"
      docker pull $full_name
      echo "export AIT_DOCKER_IMAGE_NAME=\"${image_name}\"" > "${imagerc_filename}"
      echo "export AIT_DOCKER_IMAGE_TAG=\"${image_tag}\"" >> "${imagerc_filename}"
      ;;
  wait_all)
      set +e
      # Start trying and retrying
      ((count = 500))
      while [[ $count -ne 0 ]] ; do
        sleep 6
        ./tasks wait_one full &&\
        ./tasks wait_one stretch &&\
        ./tasks wait_one bionic &&\
        ./tasks wait_one alpine
        rc=$?
        if [[ $rc -eq 0 ]] ; then
            ((count = 1))
        fi
        ((count = count - 1))
      done
      # Print a message if we failed
      if [[ $rc -ne 0 ]] ; then
        echo "Could pull images after 50 minutes - stopping."
        exit 1
      fi
      set -e
      ;;
  itest_one)
      imagerc_filename=$(get_imagerc_filename $2)
      source_imagerc "${image_dir}"  "${imagerc_filename}"
      echo "Testing image: ${AIT_DOCKER_IMAGE_NAME}:${AIT_DOCKER_IMAGE_TAG}"
      echo "IDE_DOCKER_IMAGE=\"${AIT_DOCKER_IMAGE_NAME}:${AIT_DOCKER_IMAGE_TAG}\"" > Idefile.to_be_tested
      echo "IDE_WORK=$(pwd)/test/integration/test_ide_work" >> Idefile.to_be_tested
      if [ "$2" == "full" ]; then
        time bats "$(pwd)/test/integration/end_user/bats_mono"
      else
        time bats "$(pwd)/test/integration/end_user/bats_core"
      fi
      exit $?
      ;;
  *)
      echo "Invalid command: '${command}'"
      exit 1
      ;;
esac
set +e
