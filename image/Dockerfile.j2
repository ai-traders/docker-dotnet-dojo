FROM microsoft/dotnet:{{ base_tag }}

ENV NUGET_CLI_VERSION=v4.7.1 \
  PAKET_VERSION=5.198.0 \
  FAKE_VERSION=5.7.2 \
  MONO_VERSION=5.14.0.177

ENV NODE_VERSION=v8.12.0 NPM_VERSION=6 YARN_VERSION=latest
{% if os_family == 'alpine' %}
# Add community edge repository to install shadow package
RUN echo "http://dl-cdn.alpinelinux.org/alpine/edge/community" >> /etc/apk/repositories
RUN apk update && apk upgrade && \
    apk add --no-cache bash git openssh wget curl sudo shadow nano xz
    # For base builds
    ENV CONFIG_FLAGS="--fully-static --without-npm" DEL_PKGS="libstdc++" RM_DIRS=/usr/include

    RUN apk add --no-cache curl make gcc g++ python linux-headers binutils-gold gnupg libstdc++ && \
      for server in ipv4.pool.sks-keyservers.net keyserver.pgp.com ha.pool.sks-keyservers.net; do \
        gpg --keyserver $server --recv-keys \
          94AE36675C464D64BAFA68DD7434390BDBE9B9C5 \
          B9AE9905FFD7803F25714661B63B535A4C206CA9 \
          77984A986EBC2AA786BC0F66B01FBB92821C587A \
          71DCFD284A79C3B38668286BC97EC7A07EDE3FC1 \
          FD3A5288F042B6850C66B31F09FE44734EB7990E \
          8FCCA13FEF1D0C2E91008E09770F7A9A5AE15600 \
          C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8 \
          DD8F2338BAE7501E3DD5AC78C273792F7D83545D && break; \
      done && \
      curl -sfSLO https://nodejs.org/dist/${NODE_VERSION}/node-${NODE_VERSION}.tar.xz && \
      curl -sfSL https://nodejs.org/dist/${NODE_VERSION}/SHASUMS256.txt.asc | gpg --batch --decrypt | \
        grep " node-${NODE_VERSION}.tar.xz\$" | sha256sum -c | grep ': OK$' && \
      tar -xf node-${NODE_VERSION}.tar.xz && \
      cd node-${NODE_VERSION} && \
      ./configure --prefix=/usr ${CONFIG_FLAGS} && \
      make -j$(getconf _NPROCESSORS_ONLN) && \
      make install && \
      cd / && \
      if [ -z "$CONFIG_FLAGS" ]; then \
        if [ -n "$NPM_VERSION" ]; then \
          npm install -g npm@${NPM_VERSION}; \
        fi; \
        find /usr/lib/node_modules/npm -name test -o -name .bin -type d | xargs rm -rf; \
        if [ -n "$YARN_VERSION" ]; then \
          for server in ipv4.pool.sks-keyservers.net keyserver.pgp.com ha.pool.sks-keyservers.net; do \
            gpg --keyserver $server --recv-keys \
              6A010C5166006599AA17F08146C2130DFD2497F5 && break; \
          done && \
          curl -sfSL -O https://yarnpkg.com/${YARN_VERSION}.tar.gz -O https://yarnpkg.com/${YARN_VERSION}.tar.gz.asc && \
          gpg --batch --verify ${YARN_VERSION}.tar.gz.asc ${YARN_VERSION}.tar.gz && \
          mkdir /usr/local/share/yarn && \
          tar -xf ${YARN_VERSION}.tar.gz -C /usr/local/share/yarn --strip 1 && \
          ln -s /usr/local/share/yarn/bin/yarn /usr/local/bin/ && \
          ln -s /usr/local/share/yarn/bin/yarnpkg /usr/local/bin/ && \
          rm ${YARN_VERSION}.tar.gz*; \
        fi; \
      fi && \
      apk del curl make gcc g++ python linux-headers binutils-gold gnupg ${DEL_PKGS} && \
      rm -rf ${RM_DIRS} /node-${NODE_VERSION}* /usr/share/man /tmp/* /var/cache/apk/* \
        /root/.npm /root/.node-gyp /root/.gnupg /usr/lib/node_modules/npm/man \
        /usr/lib/node_modules/npm/doc /usr/lib/node_modules/npm/html /usr/lib/node_modules/npm/scripts
{% else %}
RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
  sudo git ca-certificates wget apt-utils locales git unzip nano ssh-client xz-utils
RUN ARCH= && dpkgArch="$(dpkg --print-architecture)" \
  && case "${dpkgArch##*-}" in \
    amd64) ARCH='x64';; \
    ppc64el) ARCH='ppc64le';; \
    s390x) ARCH='s390x';; \
    arm64) ARCH='arm64';; \
    armhf) ARCH='armv7l';; \
    i386) ARCH='x86';; \
    *) echo "unsupported architecture"; exit 1 ;; \
  esac \
  && curl -SLO "https://nodejs.org/dist/${NODE_VERSION}/node-${NODE_VERSION}-linux-$ARCH.tar.xz" \
  && tar -xJf "node-${NODE_VERSION}-linux-$ARCH.tar.xz" -C /usr/local --strip-components=1 --no-same-owner \
  && rm "node-${NODE_VERSION}-linux-$ARCH.tar.xz" \
  && ln -s /usr/local/bin/node /usr/local/bin/nodejs
RUN npm -g install yarn
{% endif %}
################################################################################
# For Dojo
################################################################################
ENV DOJO_VERSION=0.4.3
RUN git clone --depth 1 -b ${DOJO_VERSION} https://github.com/ai-traders/dojo.git /tmp/dojo_git &&\
  /tmp/dojo_git/image_scripts/src/install.sh && \
  rm -r /tmp/dojo_git && \
  echo 'dojo ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers

################################################################################
# Above Dojo
################################################################################

RUN su dojo -c 'dotnet tool install fake-cli -g --version ${FAKE_VERSION}'
RUN su dojo -c 'dotnet tool install Paket -g --version ${PAKET_VERSION} --add-source https://api.nuget.org/v3/index.json'

{% if os_family == 'debian' %}
# Install common usage apt packages.
# * ssh-client - to run git clone over ssh
# * locale-gen en_US.UTF-8 - so that perl does not complain like: "perl: warning: Setting locale failed."
RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF &&\
  locale-gen en_US.UTF-8 && localedef -i en_US -f UTF-8 en_US.UTF-8 && update-locale
{% endif %}

RUN mkdir -p /home/dojo/.config/NuGet/ /home/dojo/.nuget/NuGet
COPY NuGet.Config /home/dojo/.nuget/NuGet/NuGet.Config
RUN ln -s /home/dojo/.nuget/NuGet/NuGet.Config /home/dojo/.config/NuGet/NuGet.Config &&\
  chown dojo:dojo -R /home/dojo/.nuget

{% if enable_mono %}
# Install mono.
# * libfsharp-core4.3-cil and fsharp must be installed in a separate "apt-get install" run or else it fails
RUN echo "deb http://download.mono-project.com/repo/debian {{ os_dist }}/snapshots/${MONO_VERSION} main" > /etc/apt/sources.list.d/mono-xamarin.list &&\
  apt-get update &&\
  DEBIAN_FRONTEND=noninteractive apt-get -y install --no-install-recommends\
  gcc-6-base libgcc1 libstdc++6\
  mono-devel mono-complete ca-certificates-mono mono-vbnc referenceassemblies-pcl mono-complete nunit-console &&\
  DEBIAN_FRONTEND=noninteractive apt-get -y install --no-install-recommends\
  libfsharp-core4.3-cil fsharp &&\
  DEBIAN_FRONTEND=noninteractive apt-get -y install graphviz &&\
  apt-get -y autoremove && apt-get -y autoclean && apt-get -y clean &&\
  rm -rf /tmp/* /var/tmp/* && rm -rf /var/lib/apt/lists/*

COPY paket.sh /usr/local/bin/paket
RUN wget https://github.com/fsprojects/Paket/releases/download/${PAKET_VERSION}/paket.exe -O /usr/local/bin/paket.exe &&\
  chmod 755 /usr/local/bin/paket

COPY nuget.sh /usr/local/bin/nuget
RUN wget https://dist.nuget.org/win-x86-commandline/${NUGET_CLI_VERSION}/nuget.exe -O /usr/local/bin/nuget.exe &&\
  chmod 755 /usr/local/bin/nuget

{% else %}
COPY core/* /usr/bin/
{% endif %}

# Install bats
RUN git clone --depth 1 https://github.com/sstephenson/bats.git /opt/bats &&\
   git clone --depth 1 https://github.com/ztombol/bats-support.git /opt/bats-support &&\
   git clone --depth 1 https://github.com/ztombol/bats-assert.git /opt/bats-assert &&\
 /opt/bats/install.sh /usr/local

# Warm up image
RUN su dojo -c 'mkdir -p /tmp/warmup && cd /tmp/warmup && dotnet new classlib && dotnet restore && dotnet build && rm -rf /tmp/warmup' &&\
 rm -rf /tmp/NuGetScratch
# Disable microsoft spying
ENV DOTNET_CLI_TELEMETRY_OPTOUT=1

# For Bash
COPY profile /home/dojo/.profile
COPY bashrc_default /home/dojo/.bashrc
RUN chown dojo:dojo -R /home/dojo

# Those are light to install and may change often, so they go at the bottom
# of this Dockerfile.
COPY etc_dojo.d/scripts/* /etc/dojo.d/scripts/

ENTRYPOINT ["/usr/bin/entrypoint.sh"]
CMD ["/bin/bash"]
